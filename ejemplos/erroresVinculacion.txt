/*
INCLUIMOS TAMBIÉN ESTE ARCHIVO EN EL QUE HEMOS IDO HACIENDO DIVERSAS PRUEBAS PARA PROBAR EL FUNCIONAMIENTO ADECUADO DE CADA PARTE QUE IMPLEMENTAMOS
ESTE ARCHIVO NO ESTA HECHO CON LA INTENCION DE GENERAR UN PROGRAMA QUE TENGA ALGUNA FUNCIONALIDAD, SINO PARA DETECTAR ERRORES. 
DE HECHO, NO SE PASA AL TIPADO PUESTO QUE COMO SE PUEDE VER, SE ENCUENTRAN VARIOS ERRORES DE VINCULACIÓN. 
*/


#incluir "hola.txt"
#incluir "pruebaaa.h"


enum DiaSemana { Lunes, Martes, Miercoles, Jueves, Viernes, Sabado, Domingo};
enum Resultado {accepted, timelimit, wrongAnswer};
alias matriz = lista <lista <DiaSemana>[2]> [3];
alias alejandro = flotante;

// Estructura para representar el tiempo
estructura Tiempo{
    entero hora;
    entero minuto;
    entero segundo;
};


lista <Tiempo> [2] a;

entero x_a = 5 + 1;
buleano encontrado = verdad yy mentira oo mentira;

buleano prueba(entero a, entero& b, lista <lista <DiaSemana>[4]>[4] &miArray){
    mientras (a == b){
        paraCada(entero i = 0; i < b; i = i + 1){
            b = b + 1;
        }
    }
    devuelve a;
}


buleano pruebaConReturn(entero a, entero& b){
    mientras (a == b){
        paraCada(entero i = 0; i < b; i = i + 1){
            b = b + 1;
        }
    }
    
    selecciona (b){
        caso 0: 
            si(a > 1) {
                c = verdad;
            }
        caso 1: 
            c = mentira;
            ¡para!;
        caso 2:
        porDefecto: a = 3;
    }

    devuelve a;
}

principal(){

    Tiempo t;


    matriz m = {{Viernes, Sabado}, {Sabado,Domingo}, {Domingo, Viernes}};

    lista <lista <entero>[2]>[3] miAray = {{1,2}};
    entero i = 0;

    si (mentira == mentira){
        x_a = 1;
        t.segundo = 10;
    }

    sino{
        paraCada (; i < 1 ; i = i + 1){
            buleano a = verdad;
        }
    }
    lista <lista < lista<entero>[3]>[3]>[3] c;
    lista <entero> [3] b;
    entero* n;
    Tiempo* t1;
    t.segundo = 60;
    entero z = t.segundo;
    a[1] = verdad;
    a[i] = c[2][1][2];
    b = c[1][1];
    t.segundo = t1.minuto;
    c[1][2][2] = t.minuto;
    t.minuto = c[1][2][2];

    @m = 1;
    @m = @n;
    entero x = 5 + 2*3 - 1;
    mientras (a > 1){
        x = x + 1;
    }

    entero i = 0;
   entero n = 0;

   lista <lista <entero>[12]> [12] l;

   mientras(i < 12){
    entero j = 0;
    mientras(j < 12){
        j = j + 1;
        l[i][j] = n;
        imprime(l[i][j]);
        n = n + 1;
    }
    i = i + 1;
   }

    lista < Tiempo > [10] listaTiempos;

    paraCada(entero i = 0; i < 10; i = i + 1){
        listaTiempos[i].hora = i;
        listaTiempos[i].minuto = 2*i;
        listaTiempos[i].segundo = 3*i;

        imprime(listaTiempos[i].hora );
        imprime(listaTiempos[i].minuto );
        imprime(listaTiempos[i].segundo);

    }


    

}


