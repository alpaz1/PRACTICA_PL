
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon Mar 20 17:36:11 CET 2023
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Mon Mar 20 17:36:11 CET 2023
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\005\000\002\003\005" +
    "\000\002\003\007\000\002\003\006\000\002\003\010\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\023\003\000\002\023" +
    "\004\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\004\000\002\025\006\000" +
    "\002\026\015\000\002\026\011\000\002\027\011\000\002" +
    "\027\015\000\002\030\007\000\002\020\003\000\002\020" +
    "\005\000\002\005\011\000\002\031\005\000\002\031\003" +
    "\000\002\032\005\000\002\032\003\000\002\033\005\000" +
    "\002\033\005\000\002\033\003\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\003\000\002\035\005\000\002\035\005\000\002\035\003" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\003\000\002\037\004\000\002\037\004\000\002" +
    "\037\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\006" +
    "\000\002\040\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\012\010\010\011\006\012\013\013\007\001" +
    "\002\000\004\005\175\001\002\000\004\013\007\001\002" +
    "\000\006\005\ufff6\031\ufff6\001\002\000\004\016\021\001" +
    "\002\000\006\005\ufff8\031\ufff8\001\002\000\006\005\ufff4" +
    "\031\ufff4\001\002\000\006\005\ufff5\031\ufff5\001\002\000" +
    "\006\005\ufff7\031\ufff7\001\002\000\004\002\020\001\002" +
    "\000\004\002\001\001\002\000\004\013\007\001\002\000" +
    "\004\002\ufffe\001\002\000\004\002\000\001\002\000\004" +
    "\031\022\001\002\000\004\032\023\001\002\000\004\020" +
    "\024\001\002\000\014\005\030\026\037\027\033\033\025" +
    "\035\026\001\002\000\004\031\164\001\002\000\004\031" +
    "\151\001\002\000\004\021\150\001\002\000\006\031\121" +
    "\062\145\001\002\000\016\005\ufff1\021\ufff1\026\ufff1\027" +
    "\ufff1\033\ufff1\035\ufff1\001\002\000\016\005\ufff0\021\ufff0" +
    "\026\ufff0\027\ufff0\033\ufff0\035\ufff0\001\002\000\004\031" +
    "\133\001\002\000\016\005\030\021\ufff3\026\037\027\033" +
    "\033\025\035\026\001\002\000\016\005\uffee\021\uffee\026" +
    "\uffee\027\uffee\033\uffee\035\uffee\001\002\000\016\005\uffef" +
    "\021\uffef\026\uffef\027\uffef\033\uffef\035\uffef\001\002\000" +
    "\024\005\044\012\060\014\061\031\055\045\040\047\046" +
    "\050\056\051\057\053\042\001\002\000\024\005\044\012" +
    "\060\014\061\031\055\045\040\047\046\050\056\051\057" +
    "\053\042\001\002\000\056\004\uffc9\005\uffc9\006\uffc9\007" +
    "\uffc9\021\uffc9\025\uffc9\026\uffc9\027\uffc9\032\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\052\uffc9\001\002" +
    "\000\024\005\044\012\060\014\061\031\055\045\040\047" +
    "\046\050\056\051\057\053\042\001\002\000\056\004\uffce" +
    "\005\uffce\006\uffce\007\uffce\021\uffce\025\uffce\026\uffce\027" +
    "\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce" +
    "\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046" +
    "\uffce\052\uffce\001\002\000\004\031\121\001\002\000\056" +
    "\004\uffd1\005\uffd1\006\uffd1\007\uffd1\021\uffd1\025\uffd1\026" +
    "\uffd1\027\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045" +
    "\uffd1\046\uffd1\052\uffd1\001\002\000\056\004\uffcd\005\uffcd" +
    "\006\uffcd\007\uffcd\021\uffcd\025\uffcd\026\uffcd\027\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd" +
    "\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\052" +
    "\uffcd\001\002\000\056\004\uffd5\005\uffd5\006\uffd5\007\uffd5" +
    "\021\uffd5\025\110\026\uffd5\027\uffd5\032\uffd5\033\uffd5\034" +
    "\107\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5" +
    "\043\uffd5\044\uffd5\045\uffd5\046\106\052\uffd5\001\002\000" +
    "\050\004\uffd8\005\uffd8\006\uffd8\007\uffd8\021\uffd8\026\uffd8" +
    "\027\uffd8\032\uffd8\033\uffd8\035\uffd8\036\uffd8\037\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\043\uffd8\044\103\045\104\052\uffd8" +
    "\001\002\000\044\004\101\005\uffdd\006\100\007\uffdd\021" +
    "\uffdd\026\uffdd\027\uffdd\032\uffdd\033\uffdd\035\uffdd\036\uffdd" +
    "\037\uffdd\040\uffdd\041\uffdd\042\076\043\077\052\uffdd\001" +
    "\002\000\034\005\uffe0\007\uffe0\021\uffe0\026\uffe0\027\uffe0" +
    "\032\uffe0\033\uffe0\035\uffe0\036\uffe0\037\uffe0\040\074\041" +
    "\073\052\uffe0\001\002\000\030\005\uffe2\007\uffe2\021\uffe2" +
    "\026\uffe2\027\uffe2\032\uffe2\033\uffe2\035\uffe2\036\071\037" +
    "\uffe2\052\uffe2\001\002\000\020\005\uffed\021\uffed\026\uffed" +
    "\027\uffed\033\uffed\035\uffed\037\067\001\002\000\024\005" +
    "\044\012\060\014\061\031\055\045\040\047\046\050\056" +
    "\051\057\053\042\001\002\000\056\004\uffcc\005\uffcc\006" +
    "\uffcc\007\uffcc\021\uffcc\025\uffcc\026\uffcc\027\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\052\uffcc" +
    "\001\002\000\010\010\010\011\006\012\013\001\002\000" +
    "\056\004\uffca\005\uffca\006\uffca\007\uffca\021\uffca\025\uffca" +
    "\026\uffca\027\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036" +
    "\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca" +
    "\045\uffca\046\uffca\052\uffca\001\002\000\056\004\uffcb\005" +
    "\uffcb\006\uffcb\007\uffcb\021\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040" +
    "\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb" +
    "\052\uffcb\001\002\000\004\031\063\001\002\000\004\032" +
    "\064\001\002\000\056\004\uffc8\005\uffc8\006\uffc8\007\uffc8" +
    "\021\uffc8\025\uffc8\026\uffc8\027\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\043\uffc8\044\uffc8\045\uffc8\046\uffc8\052\uffc8\001\002\000" +
    "\006\032\066\037\067\001\002\000\056\004\uffc7\005\uffc7" +
    "\006\uffc7\007\uffc7\021\uffc7\025\uffc7\026\uffc7\027\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7" +
    "\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\052" +
    "\uffc7\001\002\000\024\005\044\012\060\014\061\031\055" +
    "\045\040\047\046\050\056\051\057\053\042\001\002\000" +
    "\030\005\uffe3\007\uffe3\021\uffe3\026\uffe3\027\uffe3\032\uffe3" +
    "\033\uffe3\035\uffe3\036\071\037\uffe3\052\uffe3\001\002\000" +
    "\024\005\044\012\060\014\061\031\055\045\040\047\046" +
    "\050\056\051\057\053\042\001\002\000\034\005\uffe1\007" +
    "\uffe1\021\uffe1\026\uffe1\027\uffe1\032\uffe1\033\uffe1\035\uffe1" +
    "\036\uffe1\037\uffe1\040\074\041\073\052\uffe1\001\002\000" +
    "\024\005\044\012\060\014\061\031\055\045\040\047\046" +
    "\050\056\051\057\053\042\001\002\000\024\005\044\012" +
    "\060\014\061\031\055\045\040\047\046\050\056\051\057" +
    "\053\042\001\002\000\044\004\101\005\uffdf\006\100\007" +
    "\uffdf\021\uffdf\026\uffdf\027\uffdf\032\uffdf\033\uffdf\035\uffdf" +
    "\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\076\043\077\052" +
    "\uffdf\001\002\000\024\005\044\012\060\014\061\031\055" +
    "\045\040\047\046\050\056\051\057\053\042\001\002\000" +
    "\024\005\044\012\060\014\061\031\055\045\040\047\046" +
    "\050\056\051\057\053\042\001\002\000\024\005\044\012" +
    "\060\014\061\031\055\045\040\047\046\050\056\051\057" +
    "\053\042\001\002\000\024\005\044\012\060\014\061\031" +
    "\055\045\040\047\046\050\056\051\057\053\042\001\002" +
    "\000\050\004\uffdc\005\uffdc\006\uffdc\007\uffdc\021\uffdc\026" +
    "\uffdc\027\uffdc\032\uffdc\033\uffdc\035\uffdc\036\uffdc\037\uffdc" +
    "\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\103\045\104\052" +
    "\uffdc\001\002\000\024\005\044\012\060\014\061\031\055" +
    "\045\040\047\046\050\056\051\057\053\042\001\002\000" +
    "\024\005\044\012\060\014\061\031\055\045\040\047\046" +
    "\050\056\051\057\053\042\001\002\000\056\004\uffd6\005" +
    "\uffd6\006\uffd6\007\uffd6\021\uffd6\025\110\026\uffd6\027\uffd6" +
    "\032\uffd6\033\uffd6\034\107\035\uffd6\036\uffd6\037\uffd6\040" +
    "\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\106" +
    "\052\uffd6\001\002\000\024\005\044\012\060\014\061\031" +
    "\055\045\040\047\046\050\056\051\057\053\042\001\002" +
    "\000\024\005\044\012\060\014\061\031\055\045\040\047" +
    "\046\050\056\051\057\053\042\001\002\000\024\005\044" +
    "\012\060\014\061\031\055\045\040\047\046\050\056\051" +
    "\057\053\042\001\002\000\056\004\uffd4\005\uffd4\006\uffd4" +
    "\007\uffd4\021\uffd4\025\uffd4\026\uffd4\027\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4" +
    "\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\052\uffd4\001" +
    "\002\000\056\004\uffd3\005\uffd3\006\uffd3\007\uffd3\021\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\032\uffd3\033\uffd3\034\uffd3\035" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3" +
    "\044\uffd3\045\uffd3\046\uffd3\052\uffd3\001\002\000\056\004" +
    "\uffd2\005\uffd2\006\uffd2\007\uffd2\021\uffd2\025\uffd2\026\uffd2" +
    "\027\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2" +
    "\046\uffd2\052\uffd2\001\002\000\056\004\uffd7\005\uffd7\006" +
    "\uffd7\007\uffd7\021\uffd7\025\110\026\uffd7\027\uffd7\032\uffd7" +
    "\033\uffd7\034\107\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041" +
    "\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\106\052\uffd7" +
    "\001\002\000\050\004\uffdb\005\uffdb\006\uffdb\007\uffdb\021" +
    "\uffdb\026\uffdb\027\uffdb\032\uffdb\033\uffdb\035\uffdb\036\uffdb" +
    "\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\103\045" +
    "\104\052\uffdb\001\002\000\050\004\uffd9\005\uffd9\006\uffd9" +
    "\007\uffd9\021\uffd9\026\uffd9\027\uffd9\032\uffd9\033\uffd9\035" +
    "\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9" +
    "\044\103\045\104\052\uffd9\001\002\000\050\004\uffda\005" +
    "\uffda\006\uffda\007\uffda\021\uffda\026\uffda\027\uffda\032\uffda" +
    "\033\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042" +
    "\uffda\043\uffda\044\103\045\104\052\uffda\001\002\000\044" +
    "\004\101\005\uffde\006\100\007\uffde\021\uffde\026\uffde\027" +
    "\uffde\032\uffde\033\uffde\035\uffde\036\uffde\037\uffde\040\uffde" +
    "\041\uffde\042\076\043\077\052\uffde\001\002\000\024\005" +
    "\044\012\060\014\061\031\055\045\040\047\046\050\056" +
    "\051\057\053\042\001\002\000\004\032\126\001\002\000" +
    "\010\032\uffe6\037\067\052\124\001\002\000\024\005\044" +
    "\012\060\014\061\031\055\045\040\047\046\050\056\051" +
    "\057\053\042\001\002\000\004\032\uffe5\001\002\000\004" +
    "\007\127\001\002\000\056\004\uffe7\005\uffe7\006\uffe7\007" +
    "\uffe7\021\uffe7\025\uffe7\026\uffe7\027\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042" +
    "\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\052\uffe7\001\002" +
    "\000\056\004\uffcf\005\uffcf\006\uffcf\007\uffcf\021\uffcf\025" +
    "\uffcf\026\uffcf\027\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044" +
    "\uffcf\045\uffcf\046\uffcf\052\uffcf\001\002\000\056\004\uffd0" +
    "\005\uffd0\006\uffd0\007\uffd0\021\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0" +
    "\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046" +
    "\uffd0\052\uffd0\001\002\000\004\021\ufff2\001\002\000\024" +
    "\005\044\012\060\014\061\031\055\045\040\047\046\050" +
    "\056\051\057\053\042\001\002\000\006\032\135\037\067" +
    "\001\002\000\004\020\136\001\002\000\014\005\030\026" +
    "\037\027\033\033\025\035\026\001\002\000\004\021\140" +
    "\001\002\000\020\005\uffea\021\uffea\026\uffea\027\uffea\030" +
    "\141\033\uffea\035\uffea\001\002\000\004\020\142\001\002" +
    "\000\014\005\030\026\037\027\033\033\025\035\026\001" +
    "\002\000\004\021\144\001\002\000\016\005\uffeb\021\uffeb" +
    "\026\uffeb\027\uffeb\033\uffeb\035\uffeb\001\002\000\024\005" +
    "\044\012\060\014\061\031\055\045\040\047\046\050\056" +
    "\051\057\053\042\001\002\000\006\007\147\037\067\001" +
    "\002\000\022\005\uffec\007\uffec\021\uffec\026\uffec\027\uffec" +
    "\032\uffec\033\uffec\035\uffec\001\002\000\004\002\uffe4\001" +
    "\002\000\004\005\153\001\002\000\004\007\154\001\002" +
    "\000\004\062\145\001\002\000\024\005\044\012\060\014" +
    "\061\031\055\045\040\047\046\050\056\051\057\053\042" +
    "\001\002\000\006\007\156\037\067\001\002\000\004\005" +
    "\153\001\002\000\004\032\160\001\002\000\004\020\161" +
    "\001\002\000\014\005\030\026\037\027\033\033\025\035" +
    "\026\001\002\000\004\021\163\001\002\000\016\005\uffe8" +
    "\021\uffe8\026\uffe8\027\uffe8\033\uffe8\035\uffe8\001\002\000" +
    "\024\005\044\012\060\014\061\031\055\045\040\047\046" +
    "\050\056\051\057\053\042\001\002\000\006\032\166\037" +
    "\067\001\002\000\004\020\167\001\002\000\014\005\030" +
    "\026\037\027\033\033\025\035\026\001\002\000\004\021" +
    "\171\001\002\000\016\005\uffe9\021\uffe9\026\uffe9\027\uffe9" +
    "\033\uffe9\035\uffe9\001\002\000\004\002\uffff\001\002\000" +
    "\004\013\007\001\002\000\004\002\ufffd\001\002\000\006" +
    "\007\176\062\177\001\002\000\012\010\010\011\006\012" +
    "\013\013\ufffc\001\002\000\024\005\044\012\060\014\061" +
    "\031\055\045\040\047\046\050\056\051\057\053\042\001" +
    "\002\000\006\007\201\037\067\001\002\000\012\010\010" +
    "\011\006\012\013\013\ufffb\001\002\000\004\013\ufff9\001" +
    "\002\000\004\013\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\020\002\013\003\004\004\015\005\014\006" +
    "\003\011\011\012\010\001\001\000\002\001\001\000\006" +
    "\004\172\005\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\023\026\024\033\025\030\026\031\027\035\030\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\023\131\024\033\025\030\026" +
    "\031\027\035\030\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\030\040\031\053\032\052\033\051\034" +
    "\050\035\047\036\046\037\044\040\042\001\001\000\010" +
    "\030\040\037\130\040\042\001\001\000\002\001\001\000" +
    "\010\030\040\037\127\040\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\030" +
    "\040\031\064\032\052\033\051\034\050\035\047\036\046" +
    "\037\044\040\042\001\001\000\002\001\001\000\010\006" +
    "\061\011\011\012\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\030\040" +
    "\032\067\033\051\034\050\035\047\036\046\037\044\040" +
    "\042\001\001\000\002\001\001\000\020\030\040\033\071" +
    "\034\050\035\047\036\046\037\044\040\042\001\001\000" +
    "\002\001\001\000\016\030\040\034\117\035\047\036\046" +
    "\037\044\040\042\001\001\000\016\030\040\034\074\035" +
    "\047\036\046\037\044\040\042\001\001\000\002\001\001" +
    "\000\014\030\040\035\116\036\046\037\044\040\042\001" +
    "\001\000\014\030\040\035\115\036\046\037\044\040\042" +
    "\001\001\000\014\030\040\035\114\036\046\037\044\040" +
    "\042\001\001\000\014\030\040\035\101\036\046\037\044" +
    "\040\042\001\001\000\002\001\001\000\012\030\040\036" +
    "\113\037\044\040\042\001\001\000\012\030\040\036\104" +
    "\037\044\040\042\001\001\000\002\001\001\000\010\030" +
    "\040\037\112\040\042\001\001\000\010\030\040\037\111" +
    "\040\042\001\001\000\010\030\040\037\110\040\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\020\121\030\040" +
    "\031\122\032\052\033\051\034\050\035\047\036\046\037" +
    "\044\040\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\020\124\030\040\031\122\032\052\033\051\034" +
    "\050\035\047\036\046\037\044\040\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\030\040" +
    "\031\133\032\052\033\051\034\050\035\047\036\046\037" +
    "\044\040\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\023\136\024\033\025\030\026\031\027\035\030" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\023\142\024\033\025\030\026\031\027" +
    "\035\030\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\030\040\031\145\032\052\033\051\034\050\035" +
    "\047\036\046\037\044\040\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\030\040" +
    "\031\154\032\052\033\051\034\050\035\047\036\046\037" +
    "\044\040\042\001\001\000\002\001\001\000\004\025\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\023" +
    "\161\024\033\025\030\026\031\027\035\030\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\030\040\031" +
    "\164\032\052\033\051\034\050\035\047\036\046\037\044" +
    "\040\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\023\167\024\033\025\030\026\031\027\035\030\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\202\006\003\011\011\012\010\001" +
    "\001\000\024\030\040\031\177\032\052\033\051\034\050" +
    "\035\047\036\046\037\044\040\042\001\001\000\002\001" +
    "\001\000\012\003\201\006\003\011\011\012\010\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Principal 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= Declaraciones Principal 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Programa ::= Funciones Principal 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Programa ::= Declaraciones Funciones Principal 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Declaraciones ::= Tipo IDEN PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaraciones",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Declaraciones ::= Tipo IDEN IGUAL E0 PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaraciones",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Declaraciones ::= Tipo IDEN PUNTOYCOMA Declaraciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaraciones",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaraciones ::= Tipo IDEN IGUAL E0 PUNTOYCOMA Declaraciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaraciones",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Tipo ::= TIPOINT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Tipo ::= TIPOFLOAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Tipo ::= TIPOBOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Tipo ::= TipoArray 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Tipo ::= TipoPuntero 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ListaInstrucciones ::= Instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaInstrucciones",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ListaInstrucciones ::= Instruccion ListaInstrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaInstrucciones",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Instruccion ::= Asignacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Instruccion ::= Condicional 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Instruccion ::= Iteracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Instruccion ::= LlamadaFuncion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Instruccion ::= RETURN E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Asignacion ::= IDEN IGUAL E0 PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Asignacion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Condicional ::= IF PAP E0 PCIERRE LLAP ListaInstrucciones LLCIERRE ELSE LLAP ListaInstrucciones LLCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Condicional",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Condicional ::= IF PAP E0 PCIERRE LLAP ListaInstrucciones LLCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Condicional",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Iteracion ::= WHILE PAP E0 PCIERRE LLAP ListaInstrucciones LLCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Iteracion",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Iteracion ::= FOR PAP Asignacion PUNTOYCOMA E0 PUNTOYCOMA Asignacion PCIERRE LLAP ListaInstrucciones LLCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Iteracion",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LlamadaFuncion ::= IDEN PAP Argumentos PCIERRE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LlamadaFuncion",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Argumentos ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Argumentos",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Argumentos ::= E0 COMA Argumentos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Argumentos",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Principal ::= VOID MAIN PAP PCIERRE LLAP ListaInstrucciones LLCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Principal",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E0 ::= E0 OR E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E1 ::= E1 AND E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E2 ::= E2 IGUALDAD E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E2 ::= E2 DISTINTO E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E3 ::= E3 MAYOR E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E3 ::= E3 MENOR E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E3 ::= E3 MAYORIGUAL E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E3 ::= E3 MENORIGUAL E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E4 ::= E4 MAS E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E4 ::= E4 MENOS E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E5 ::= E5 POR E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E5 ::= E5 DIV E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E5 ::= E5 MOD E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E6 ::= MENOS E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E6 ::= NEGACION E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E6 ::= E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E7 ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E7 ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E7 ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E7 ::= TIPOFLOAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E7 ::= LlamadaFuncion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E7 ::= NEW Tipo PAP PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E7 ::= PAP E0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

