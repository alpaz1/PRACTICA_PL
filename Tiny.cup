package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;

scan with {: return getScanner().next_token(); :};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal    MAYOR ,IDEN, MENOR, PUNTOYCOMA, TIPOINT,TIPOBOOL,TIPOFLOAT, VOID, ENT, MAIN, PUNTO, DOSPUNTOS,
            ENUM, LLAP, LLCIERRE, CAP, CCIERRE, STRUCT,POR, RETURN, IF, ELSE, PAP, PCIERRE, WHILE, DIV, ARROBA,
            FOR, AND, OR, IGUALDAD , DISTINTO, MAYORIGUAL, MENORIGUAL, MAS, MENOS, MOD, TRUE, FALSE, NEW, COMA, NEGACION,
            PRINT, READ, SWITCH, BREAK, DEFAULT, CASE, IGUAL, UNVERSAND, INCLUDE, ALMOHADILLA, COMILLASDOBLES, REAL;

non terminal  Programa, Principal,Tipo, DeclaracionRegistro, ListaArgumentos, Argumento, InsFor,
              ListaEnumerado, ListaCampos, Declaracion, Funcion, Argumentos, ListaParametros, NombreFuncion, 
              Parametro,Parametros, ListaInstrucciones, Instruccion, Asignacion, Condicional, Iteracion, LlamadaFuncion, Bloque, Caso,
              E0, E1, E2, E3, E4, E5, E6,E7, Modulos, DeclaracionEnumerado, Selecciona, Casos, Valor, InsParada, PorDefecto, ListaValores,
              AsignacionArray, AcesoStruct;


Programa ::= Declaracion PUNTOYCOMA Programa 
                  {: System.out.println("Declaracion");:}
            |Modulos Programa
                  {: System.out.println("MÃ³dulo");:}
            | Funcion Programa 
                  {: System.out.println("Funcion");:}
            | Principal
                  {: System.out.println("Se acabo el programa");:};


Tipo ::=  Tipo CAP E0 CCIERRE| Tipo CAP CCIERRE |VOID | TIPOINT | TIPOFLOAT | TIPOBOOL | IDEN| Tipo POR;
Modulos ::= ALMOHADILLA INCLUDE COMILLASDOBLES IDEN PUNTO IDEN COMILLASDOBLES;
Principal ::= VOID MAIN PAP PCIERRE LLAP ListaInstrucciones LLCIERRE ;
ListaInstrucciones ::= Instruccion PUNTOYCOMA ListaInstrucciones | Bloque ListaInstrucciones | ;
Instruccion ::=  Declaracion | Asignacion | RETURN E0 | LlamadaFuncion| AcesoStruct;

// ------------------------ Instrucciones ------------------------

ListaValores ::= COMA Valor ListaValores|;
NombreFuncion ::= IDEN | READ | PRINT;
LlamadaFuncion ::= NombreFuncion PAP Argumentos PCIERRE;
Argumentos ::= ListaArgumentos | ;
ListaArgumentos ::= Argumento COMA ListaArgumentos | Argumento;
Argumento ::= E0;

Declaracion ::=  Tipo Asignacion | Tipo IDEN | DeclaracionEnumerado | DeclaracionRegistro;
Asignacion ::= IDEN IGUAL E0 | IDEN IGUAL AsignacionArray | ARROBA IDEN IGUAL E0;
AsignacionArray ::= LLAP Valor ListaValores LLCIERRE | LLAP AsignacionArray LLCIERRE;


// ------------------------ Bloques ------------------------
Bloque ::= Condicional
                  {: System.out.println("      Condicional");:}
           | Iteracion 
                  {: System.out.println("      Bucle");:}
           | Selecciona
                  {: System.out.println("      Switch");:};

Condicional ::= IF PAP E0 PCIERRE LLAP ListaInstrucciones LLCIERRE
              | IF PAP E0 PCIERRE LLAP ListaInstrucciones LLCIERRE ELSE LLAP ListaInstrucciones LLCIERRE;
Iteracion ::= WHILE PAP E0 PCIERRE LLAP ListaInstrucciones LLCIERRE
              | FOR PAP InsFor E0 PUNTOYCOMA Asignacion  PCIERRE LLAP ListaInstrucciones LLCIERRE;
InsFor ::= TIPOINT Asignacion PUNTOYCOMA | Asignacion PUNTOYCOMA | PUNTOYCOMA;
Selecciona ::= SWITCH PAP IDEN PCIERRE LLAP Casos  PorDefecto LLCIERRE;
Casos ::= Caso Casos |;
Caso ::= CASE Valor DOSPUNTOS ListaInstrucciones InsParada;
Valor ::= TRUE|FALSE|ENT|REAL;
PorDefecto ::= DEFAULT DOSPUNTOS ListaInstrucciones |;
InsParada ::= BREAK PUNTOYCOMA | ;
//CON ESTA SINTAXIS EL ACCESO A LOS ARRAYS ES DIFICIL, CREO QUE MEJOR DECLARAR ARRAYS CON <>
AcesoStruct ::= IDEN PUNTO IDEN | IDEN PUNTO Asignacion;

// ----------------------Funciones--------------------------
Funcion ::= Tipo IDEN PAP Parametros PCIERRE LLAP ListaInstrucciones   LLCIERRE;
Parametros ::= ListaParametros | ;
ListaParametros ::= Parametro COMA ListaParametros | Parametro;
Parametro ::= Tipo IDEN | Tipo UNVERSAND IDEN;

//---------------------Otros tipos ----------------------------
DeclaracionEnumerado ::= ENUM IDEN LLAP ListaEnumerado LLCIERRE;
ListaEnumerado ::= IDEN COMA ListaEnumerado | IDEN;
DeclaracionRegistro ::= STRUCT IDEN LLAP ListaCampos LLCIERRE;
ListaCampos ::= Tipo IDEN PUNTOYCOMA| Tipo IDEN PUNTOYCOMA ListaCampos;


//------------------ Expresiones ----------------------------

E0 ::= E0 OR E1 | E1;

E1 ::= E1 AND E2 | E2;

E2 ::= E2 IGUALDAD E3 | E2 DISTINTO E3 | E3;

E3 ::= E3 MAYOR E4
      | E3 MENOR E4
      | E3 MAYORIGUAL E4
      | E3 MENORIGUAL E4
      | E4;

E4 ::= E4 MAS E5
      | E4 MENOS E5
      | E5;

E5 ::= E5 POR E6
      | E5 DIV E6
      | E5 MOD E6
      | E6;

E6 ::= MENOS E6
      | NEGACION E6
      | E7;

E7 ::=  TRUE
      | FALSE
      | ENT
      | REAL
      | IDEN
      | IDEN PUNTO IDEN
      | ARROBA IDEN
      | LlamadaFuncion
      | NEW Tipo PAP PCIERRE
      | PAP E0 PCIERRE;






