package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import alex.TokenValue;
import ast.*;
import ast.Expresions.*;
import ast.Instructions.*;
import ast.Types.*;
import ast.Estructuras.*;
import ast.Estructuras.clases.*;
import ast.Auxiliares.*;
import ast.Accesos.*;
import java.util.List;
import java.util.ArrayList;

scan with {: return getScanner().next_token(); :};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal    TokenValue MAYOR, IDEN, MENOR, PUNTOYCOMA, TIPOINT, TIPOBOOL, TIPOFLOAT, VOID, ENT, MAIN, PUNTO, DOSPUNTOS, CLASS, PRIVATE,
            ENUM, LLAP, LLCIERRE, CAP, CCIERRE, STRUCT, POR, RETURN, IF, ELSE, PAP, PCIERRE, WHILE, DIV, ARROBA, PUBLIC,
            FOR, AND, OR, IGUALDAD , DISTINTO, MAYORIGUAL, MENORIGUAL, MAS, MENOS, MOD, TRUE, FALSE, NEW, COMA, NEGACION, TYPEDEF,
            PRINT, READ, SWITCH, BREAK, DEFAULT, CASE, IGUAL, AMPERSAND, INCLUDE, ALMOHADILLA, COMILLASDOBLES, REAL, ARRAY;


non terminal Programa P;
non terminal FMain Principal;
non terminal Modulo Modulos;
non terminal List<Instruccion> ListaInstrucciones,BloqueInst;
non terminal List<Declaracion> ListaCampos;
non terminal Instruccion Instruccion;
non terminal Alias Alias;
non terminal Acceso Acceso0,Acceso1;
non terminal StructClass DeclaracionRegistro;
non terminal Declaracion Declaracion;
non terminal PrivacyMode ModAcceso; 
non terminal Clase Clase,CuerpoClase;
non terminal Atributo Atributo;
non terminal Constructor Constructor;
non terminal Metodo Metodo;
non terminal Asignacion Asignacion;
non terminal Condicional Condicional;
non terminal Devuelve Return;
non terminal Imprime Print;
non terminal Lee Read;
non terminal Bloque Iteracion;
non terminal Bloque Bloque;
non terminal Switch Selecciona;
non terminal List<CasoSwitch> Casos;
non terminal CasoSwitch Caso;
non terminal CasoSwitch PorDefecto;
non terminal Funcion Funcion;
non terminal Parametro Parametro;
non terminal LlamadaFunInst InsLlamadaFuncion;
non terminal LlamadaFunExp LlamadaFuncion,LlamadaConstructor;
non terminal LlamadaMetodo InsLlamadaMetodo;
non terminal List<Parametro> ListaParametros;
non terminal List<Parametro> Parametros;
non terminal List<E> ListaArgumentos;
non terminal EnumClass DeclaracionEnumerado;
non terminal List<String> ListaEnumerado;
non terminal DefinitionsList Declaraciones;
non terminal Types Tipo;
non terminal E E0,E1,E2,E3,E4,E5,E6,E7,ExpParentesis;
non terminal ArrayList<E> ExpArray;
non terminal ExpNew HeapExp;


P ::= Declaraciones:decs Principal:p
              {: RESULT = new Programa(decs, p);:}
      | Declaraciones:decs error
              {:System.out.println("Error: No se encuentra la funcion principal");RESULT=null;:};

Declaraciones ::= Declaracion:d Declaraciones:decs
                    {: decs.addBasic(d);RESULT = decs; :} 
                | Alias:a Declaraciones:decs
                    {:decs.addAlias(a); RESULT = decs;:}
                | DeclaracionEnumerado:d Declaraciones:decs
                    {:decs.addEnum(d); RESULT = decs;:}
                | DeclaracionRegistro:s Declaraciones:decs
                    {:decs.addStruct(s);RESULT = decs;:}
                | Modulos:m Declaraciones:decs
                    {:decs.addModulo(m);RESULT = decs;:}
                | Funcion:f Declaraciones:decs
                    {:decs.addFuncion(f); RESULT = decs;:}
                | Clase:clase Declaraciones:decs
                    {:decs.addClase(clase);RESULT=decs;:}
                |
                    {: RESULT = new DefinitionsList(); :};

Acceso0 ::= Acceso0:ref CAP E0:exp CCIERRE 
            {: RESULT = new AccesoArray(ref,exp); :}
            | Acceso0:ref PUNTO IDEN:campo 
            {: RESULT = new AccesoStruct(ref,campo.lexema); :}
            | Acceso0:ref PUNTO IDEN:metodo PAP ListaArgumentos:arglist PCIERRE
            {: RESULT = new AccesoMetodo(ref,new LlamadaFunExp(metodo.lexema,arglist));:}
            | Acceso1:ref
            {: RESULT = ref; :};
Acceso1 ::= IDEN:nombre
            {: RESULT = new AccesoVar(nombre.lexema); :}
            | ARROBA Acceso1:ref
            {: RESULT = new AccesoPuntero(ref); :}
            | ARROBA PAP Acceso0:ref PCIERRE
            {: RESULT = new AccesoPuntero(ref); :}
            | POR Acceso1:ref
            {: RESULT = new Puntero(ref); :}
            | POR PAP Acceso0:ref PCIERRE
            {: RESULT = new Puntero(ref); :};


Declaracion ::= Tipo:t IDEN:n IGUAL E0:exp PUNTOYCOMA
                    {:RESULT = new Declaracion(t, n.lexema, exp);:}
                | Tipo:t IDEN:n PUNTOYCOMA
                    {:RESULT = new Declaracion(t, n.lexema);:}
                | Tipo IDEN error
                {: System.out.println("Error en Declaracion"); RESULT = null; :};

Asignacion ::= Acceso0:ref IGUAL E0:exp PUNTOYCOMA
               {:RESULT = new Asignacion(ref,exp);:}
               | Acceso0 IGUAL E0 error
               {: System.out.println("Error: Falta ;"); RESULT = null; :};


Tipo ::=  TIPOINT 
            {:RESULT= new BasicTypes(KindTypes.INT);:}
          | TIPOFLOAT 
            {:RESULT= new BasicTypes(KindTypes.FLOAT);:}
          | TIPOBOOL 
            {:RESULT=new BasicTypes(KindTypes.BOOL);:}
          | VOID                    
            {:RESULT= new BasicTypes(KindTypes.VOID);:}
          | IDEN:nombre
            {:RESULT = new StructType(nombre.lexema);:}
          | ARRAY MENOR Tipo:t MAYOR CAP ENT:valor CCIERRE
            {:Const tam = new Const(valor.lexema, new BasicTypes(KindTypes.INT)); RESULT = new ArrayType(t,tam);:}
          | ARRAY MENOR Tipo:t MAYOR CAP CCIERRE
            {:RESULT = new ArrayType(t,null);:}
          | Tipo:t POR
            {:RESULT = new PointerType(t);:};

Alias ::= TYPEDEF IDEN:nombre IGUAL Tipo:tipo PUNTOYCOMA
          {:RESULT = new Alias(nombre.lexema,tipo);:}
          | TYPEDEF IDEN IGUAL Tipo error
          {:System.out.println("Error alias: falta el ;");RESULT = null;:};

Modulos ::= ALMOHADILLA INCLUDE COMILLASDOBLES IDEN:nombre PUNTO IDEN:ext COMILLASDOBLES
            {:RESULT = new Modulo(nombre.lexema,ext.lexema);:}
            | ALMOHADILLA error
            {:System.out.println("Syntax error in module import");RESULT=null;:};
Principal ::= MAIN PAP PCIERRE BloqueInst:instList 
            {:RESULT= new FMain(instList);:};
ListaInstrucciones ::= Instruccion:ins ListaInstrucciones:insList 
                        {:RESULT = insList; insList.add(ins);:}
                     | Bloque:block ListaInstrucciones:insList
                        {:RESULT = insList; insList.add(block);:}
                     | {:RESULT = new ArrayList<Instruccion>();:};

Instruccion ::= Declaracion:dec
                  {:RESULT = dec;:}
              | Asignacion:as
                  {:RESULT = as;:}
              | Return:ret
                  {:RESULT =ret;:}
              | Print:pr
                  {:RESULT = pr;:}
              | InsLlamadaFuncion:fun 
                  {:RESULT = fun;:}
              | InsLlamadaMetodo:met
                  {:RESULT=met;:}
              | error PUNTOYCOMA
                  {:System.out.println("Error: Instruccion erronea");RESULT=null;:};
                  

InsLlamadaFuncion ::= LlamadaFuncion:fun PUNTOYCOMA
                      {:RESULT = new LlamadaFunInst(fun);:}
                      |LlamadaFuncion:fun error
                      {:System.out.println("Error: Falta ; en llamada a funcion");RESULT=null;:};

InsLlamadaMetodo ::= Acceso0:ref PUNTO IDEN:metodo PAP ListaArgumentos:arglist PCIERRE PUNTOYCOMA
                  {: RESULT = new LlamadaMetodo(ref,new LlamadaFunExp(metodo.lexema,arglist));:}
                  | Acceso0:ref PUNTO IDEN:metodo PAP ListaArgumentos:arglist PCIERRE error
                  {:System.out.println("Error: Falta ; en llamada a método");RESULT=null;:};

//---------------------Clases-----------------------------------

Clase::= ModAcceso:modo CLASS IDEN:nombre LLAP CuerpoClase:clase LLCIERRE
              {:clase.setName(nombre.lexema);clase.setModo(modo);RESULT= clase;:};
CuerpoClase ::= Atributo:a CuerpoClase:clase
               {:clase.addAtrib(a);RESULT=clase;:}
               | Constructor:c CuerpoClase:clase
               {:clase.addConstr(c);RESULT=clase;:}
               | Metodo:m CuerpoClase:clase
               {:clase.addMetodo(m);RESULT=clase;:}
               |
               {:RESULT = new Clase();:};

Atributo ::= ModAcceso:modo Declaracion:dec
              {:RESULT = new Atributo(modo,dec);:};
Constructor::= ModAcceso:modo IDEN PAP Parametros:param PCIERRE BloqueInst:inst
                {:RESULT = new Constructor(modo,param,inst);:};
Metodo ::= ModAcceso:modo Funcion:fun
            {:RESULT = new Metodo(modo,fun);:};

ModAcceso::= PUBLIC
            {:RESULT = PrivacyMode.PUBLIC;:}
            | PRIVATE
            {:RESULT = PrivacyMode.PRIVATE;:}
            |
            {:RESULT = PrivacyMode.PRIVATE;:};

LlamadaConstructor ::= NEW IDEN:nombreClase PAP ListaArgumentos:argList PCIERRE
                      {:RESULT = new LlamadaFunExp(nombreClase.lexema,argList);:};
// ------------------------ Instrucciones ------------------------

// Llamada a función como expresión
LlamadaFuncion ::= IDEN:nombre PAP ListaArgumentos:args PCIERRE
                  {:RESULT = new LlamadaFunExp(nombre.lexema,args);:};
                  
      
ListaArgumentos ::= E0:arg COMA ListaArgumentos:arglist 
                {:arglist.add(arg); RESULT = arglist;:}
              | E0:exp
                {: RESULT =  new ArrayList<E>(); RESULT.add(exp);  :}
              |
                {: RESULT = new ArrayList<E>(); :};

Print ::= PRINT PAP E0:exp PCIERRE PUNTOYCOMA
          {: RESULT = new Imprime(exp); :}
          | PRINT PAP E0 PCIERRE error
          {: System.out.println("Error: Falta ;"); RESULT = null; :};

Read ::= READ PAP PCIERRE 
         {:RESULT = new Lee();:};

Return ::= RETURN E0:exp PUNTOYCOMA
            {:RESULT = new Devuelve(exp);:}
          | RETURN PUNTOYCOMA
            {:RESULT = new Devuelve();:}
          | RETURN error
            {: System.out.println("Error: Return"); RESULT = null; :};

// ------------------------ Bloques ------------------------
Bloque ::= Condicional:block
              {:RESULT= block;:}
           | Iteracion:block
              {:RESULT = block;:}
           | Selecciona:sel
                  {:RESULT = sel;:}
           | LLAP ListaInstrucciones:ins LLCIERRE
              {:RESULT = new Bloque(ins);:};

BloqueInst ::= LLAP ListaInstrucciones:ins LLCIERRE
                {:RESULT = ins;:};
              //| error ListaInstrucciones:ins LLCIERRE
              //  {:System.out.println("Error: Missing opening bracket");RESULT=null;:}
              //| LLAP ListaInstrucciones:ins error
              //  {:System.out.println("Error: Missing closing brackets");RESULT=null;:};

Condicional ::= IF PAP E0:exp PCIERRE BloqueInst:ins
              {: RESULT = new Condicional(exp,ins); :}
              | IF PAP E0:exp PCIERRE BloqueInst:ins ELSE BloqueInst:inselse
              {: RESULT = new Condicional(exp,ins,inselse); :}
              | IF error BloqueInst
              {:System.out.println("Error: Condicion del If");RESULT=null;:};

Iteracion ::= WHILE PAP E0:exp PCIERRE BloqueInst:inst
              {:RESULT = new BucleWhile(exp,inst);:}
              | WHILE error BloqueInst
               {: System.out.println("Error: Condicion del while"); RESULT = null; :}   
              | FOR PAP Declaracion:dec E0:exp PUNTOYCOMA Acceso0:ref IGUAL E0:exp1 PCIERRE BloqueInst:inst
               {:RESULT = new BucleFor(dec, exp, new Asignacion(ref,exp1), inst );:}
              | FOR PAP PUNTOYCOMA E0:exp PUNTOYCOMA Acceso0:ref IGUAL E0:exp1 PCIERRE BloqueInst:inst
               {:RESULT = new BucleFor(exp,new Asignacion(ref,exp1),inst);:}
              | FOR error BloqueInst
               {:System.out.println("Error: Condicion del for"); RESULT = null; :};


Selecciona ::= SWITCH PAP IDEN:nombre PCIERRE LLAP Casos:casos PorDefecto:def LLCIERRE
            {:RESULT= new Switch(new AccesoVar(nombre.lexema),casos,def);:}
            | SWITCH PAP IDEN:nombre PCIERRE LLAP Casos:casos LLCIERRE
            {:RESULT= new Switch(new AccesoVar(nombre.lexema),casos);:}
            | SWITCH PAP IDEN:nombre PCIERRE LLAP error LLCIERRE
            {:System.out.println("Error: Cuerpo del Switch");RESULT=null;:}
            | SWITCH error LLAP Casos:casos PorDefecto:def LLCIERRE
            {: System.out.println("Error: Condicion switch"); RESULT = null; :}
            | SWITCH error LLAP Casos:casos LLCIERRE
            {: System.out.println("Error: Condicion switch"); RESULT = null; :};
Casos ::= Caso:caso Casos:casos 
           {: casos.add(caso); RESULT = casos; :}
          |
          {: RESULT = new ArrayList<CasoSwitch>();:};
Caso ::= CASE E0:exp DOSPUNTOS ListaInstrucciones:inst BREAK PUNTOYCOMA
          {:RESULT= new CasoSwitch(exp,inst,true);:}
          | CASE E0:exp DOSPUNTOS ListaInstrucciones:inst
          {:RESULT= new CasoSwitch(exp,inst,false);:}
          | CASE E0:exp DOSPUNTOS ListaInstrucciones:inst BREAK
          {:System.out.println("Error: Break falta ;");RESULT = null;:};
PorDefecto ::= DEFAULT DOSPUNTOS ListaInstrucciones:inst
              {:RESULT= new CasoSwitch(inst);:};

// ----------------------Funciones--------------------------
Funcion ::= Tipo:t IDEN:id PAP Parametros:paramList PCIERRE BloqueInst:instList
              {:RESULT= new Funcion(t, id.lexema, paramList, instList);:}
            |Tipo:t IDEN:id error BloqueInst:instList
              {:System.out.println("Error: syntax error in parameter specification");RESULT=null;:};
Parametros ::= ListaParametros:paramList
              {:RESULT = paramList;:}
              | 
              {:RESULT = new ArrayList<Parametro>();:};
ListaParametros ::= Parametro:param COMA ListaParametros:paramList
                    {:paramList.add(param); RESULT = paramList;:}
                  | Parametro:param
                    {:List<Parametro> paramList = new ArrayList<Parametro>(); paramList.add(param); RESULT = paramList;:};
Parametro ::= Tipo:t IDEN:id
              {:RESULT = new Parametro(t, id.lexema, false);:}
            | Tipo:t AMPERSAND IDEN:id
              {:RESULT = new Parametro(t, id.lexema, true);:};

//---------------------Otros tipos ----------------------------
DeclaracionEnumerado ::= ENUM IDEN:n LLAP ListaEnumerado:campos LLCIERRE PUNTOYCOMA
                            {:RESULT= new EnumClass(n.lexema, campos);:}
                          | ENUM IDEN LLAP ListaEnumerado LLCIERRE error
                            {: System.out.println("Error: Enumerado falta ;"); RESULT = null; :}
                          | ENUM error PUNTOYCOMA
                            {: System.out.println("Error: Enumerado en cuerpo"); RESULT = null; :};
ListaEnumerado ::= IDEN:campo COMA ListaEnumerado:campos
                    {:campos.add(campo.lexema); RESULT = campos;:}
                 | IDEN:campo
                    {:List<String> campos = new ArrayList<String>(); campos.add(campo.lexema); RESULT = campos;:};
DeclaracionRegistro ::= STRUCT IDEN:nombre LLAP ListaCampos:valores LLCIERRE PUNTOYCOMA
                    {:RESULT = new StructClass(nombre.lexema,valores);:}
                    | STRUCT IDEN LLAP ListaCampos LLCIERRE error
                    {: System.out.println("Error: Struct falta ;"); RESULT = null; :};
ListaCampos ::= Declaracion:dec ListaCampos:valores
                {:valores.add(dec); RESULT = valores;:} 
                | Declaracion:dec
                {:List<Declaracion> decs = new ArrayList<Declaracion>();decs.add(dec);RESULT = decs;:};


//------------------ Expresiones ----------------------------

E0 ::= E0:opIzq OR E1:opDer
        {:RESULT= new EBin(opIzq, opDer, KindE.OR, new BasicTypes(KindTypes.BOOL));:}
     | E1:e
        {:RESULT = e;:};

E1 ::= E1:opIzq AND E2:opDer 
        {:RESULT= new EBin(opIzq, opDer, KindE.AND, new BasicTypes(KindTypes.BOOL));:}
     | E2:e
        {:RESULT = e;:};

E2 ::= E2:opIzq IGUALDAD E3:opDer
          {:RESULT= new EBin(opIzq, opDer, KindE.IGUALDAD, new BasicTypes(KindTypes.BOOL));:}
      | E2:opIzq DISTINTO E3:opDer
          {:RESULT= new EBin(opIzq, opDer, KindE.DISTINTO, new BasicTypes(KindTypes.BOOL));:}
      | E3:e
          {:RESULT = e;:};

E3 ::= E3:opIzq MAYOR E4:opDer
          {:RESULT = new EBin(opIzq, opDer, KindE.MAYOR, new BasicTypes(KindTypes.BOOL));:}
      | E3:opIzq MENOR E4:opDer
          {:RESULT = new EBin(opIzq, opDer, KindE.MENOR, new BasicTypes(KindTypes.BOOL));:}
      | E3:opIzq MAYORIGUAL E4:opDer
          {:RESULT = new EBin(opIzq, opDer, KindE.MAYORIGUAL, new BasicTypes(KindTypes.BOOL));:}
      | E3:opIzq MENORIGUAL E4:opDer
          {:RESULT = new EBin(opIzq, opDer, KindE.MENORIGUAL, new BasicTypes(KindTypes.BOOL));:}
      | E4:e
          {:RESULT = e;:}
      | HeapExp:exp
        {:RESULT = exp;:};

E4 ::= E4:opIzq MAS E5:opDer
          {:RESULT = new EBin(opIzq, opDer, KindE.SUMA, new BasicTypes(KindTypes.INT));:}
      | E4:opIzq MENOS E5:opDer
          {:RESULT = new EBin(opIzq, opDer, KindE.RESTA, new BasicTypes(KindTypes.INT));:}
      | E5:e
          {:RESULT = e;:};

E5 ::= E5:opIzq POR E6:opDer
          {:RESULT = new EBin(opIzq, opDer, KindE.MUL, new BasicTypes(KindTypes.INT));:}
      | E5:opIzq DIV E6:opDer
          {:RESULT = new EBin(opIzq, opDer, KindE.DIV, new BasicTypes(KindTypes.INT));:}
      | E5:opIzq MOD E6:opDer
          {:RESULT = new EBin(opIzq, opDer, KindE.MOD, new BasicTypes(KindTypes.INT));:}
      | E6:e
          {:RESULT = e;:};

E6 ::= MENOS E6:exp
        {:RESULT = new EUnaria(exp,KindE.MENOS, new BasicTypes(KindTypes.INT));:}
      | NEGACION E6:exp
       {:RESULT = new EUnaria(exp, KindE.NEG,new BasicTypes(KindTypes.BOOL));:} 
      | E7:e
          {:RESULT = e;:};
          

E7 ::= TRUE:valor
        {:RESULT = new Const(valor.lexema, new BasicTypes(KindTypes.BOOL));:}
      | FALSE:valor
        {:RESULT = new Const(valor.lexema, new  BasicTypes(KindTypes.BOOL));:}
      | ENT:valor
        {:RESULT = new Const(valor.lexema, new BasicTypes(KindTypes.INT));:}
      | REAL:valor
        {:RESULT = new Const(valor.lexema,new BasicTypes(KindTypes.FLOAT));:}
      | Acceso0:ref
        {:RESULT=ref;:}
      | LlamadaFuncion:llamada
        {:RESULT=llamada;:}
      | Read:llamada
        {:RESULT=llamada;:}
      | LlamadaConstructor:llamada // hola
        {:RESULT=llamada;:}
      | ExpParentesis:exp
        {:RESULT = exp;:}
      | LLAP ExpArray:lst LLCIERRE
        {:RESULT = new ExpArray(lst);:};

HeapExp ::= NEW Tipo:tipo
        {:RESULT = new ExpNew(tipo);:};

ExpParentesis ::= PAP E0:exp PCIERRE
                  {:RESULT = exp;:};
                  //| error E0:exp PCIERRE
                  //{:System.out.println("Error: Missing parenthesis in expression");RESULT = null;:}
                  //| PAP E0:exp error
                  //{:System.out.println("Error: Missing parenthesis in expression");RESULT=null;:};

ExpArray ::= E0:arg COMA ExpArray:arglist 
            {:arglist.add(arg); RESULT = arglist;:}
          | E0:exp
            {: RESULT =  new ArrayList<E>(); RESULT.add(exp);:}
          |
            {: RESULT = new ArrayList<E>(); :};