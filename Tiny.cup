package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;

scan with {: return getScanner().next_token(); :};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};

//AÑADIR & (y en parametros), SWITCH, #, INCLUDE
terminal    MAYOR ,IDEN, MENOR, PUNTOYCOMA, TIPOINT,TIPOBOOL,TIPOFLOAT, VOID, ENT, REAL, MAIN,
            ENUM, LLAP, LLCIERRE, CAP, CCIERRE, STRUCT,POR, RETURN, IF, ELSE, PAP, PCIERRE, WHILE, DIV,
            FOR, AND, OR, IGUALDAD , DISTINTO, MAYORIGUAL, MENORIGUAL, MAS, MENOS, MOD, TRUE, FALSE, NEW, COMA, NEGACION,
            PRINT, READ, SWITCH, BREAK, DEFAULT, CASE, IGUAL, UNVERSAND, INCLUDE, ALMOHADILLA;

non terminal  Programa,Declariacion, Principal,Tipo, NombreEnumerado, NombreRegistro, TipoArray, ListaArgumentos, Argumento, InsFor,
              TipoPuntero, ListaEnumerado, ListaCampos, Declaracion, TamañoArray, Funcion, Argumentos, ListaParametros, NombreFuncion, 
              Parametro,Parametros, ListaInstrucciones, Instruccion, Asignacion, Condicional, Iteracion, LlamadaFuncion, Bloque,
              E0, E1, E2, E3, E4, E5, E6,E7;


//Modulos ::=  MENOR IDEN MAYOR Programa;
Programa ::= Declaracion PUNTOYCOMA Programa 
                  {: System.out.println("Declaracion");:}
            | Funcion Programa 
                  {: System.out.println("Funcion");:}
            | Principal
                  {: System.out.println("Se acabo el programa");:};
Tipo ::= VOID | TIPOINT | TIPOFLOAT | TIPOBOOL | TipoArray | TipoPuntero;

Principal ::= VOID MAIN PAP PCIERRE LLAP ListaInstrucciones LLCIERRE ;
ListaInstrucciones ::= Instruccion PUNTOYCOMA ListaInstrucciones | Bloque ListaInstrucciones | ;
Instruccion ::=  Declaracion | Asignacion | RETURN E0 | LlamadaFuncion | ;

// ------------------------ Instrucciones ------------------------
Declaracion ::=  Tipo Asignacion| Tipo IDEN;
Asignacion ::= IDEN IGUAL E0;
NombreFuncion ::= IDEN | READ | PRINT;
LlamadaFuncion ::= NombreFuncion PAP Argumentos PCIERRE;
Argumentos ::= ListaArgumentos | ;
ListaArgumentos ::= Argumento COMA ListaArgumentos | Argumento;
Argumento ::= E0;

// ------------------------ Bloques ------------------------
Bloque ::= Condicional| Iteracion;
Condicional ::= IF PAP E0 PCIERRE LLAP ListaInstrucciones LLCIERRE
              | IF PAP E0 PCIERRE LLAP ListaInstrucciones LLCIERRE ELSE LLAP ListaInstrucciones LLCIERRE;
Iteracion ::= WHILE PAP E0 PCIERRE LLAP ListaInstrucciones LLCIERRE
              | FOR PAP InsFor E0 PUNTOYCOMA Asignacion  PCIERRE LLAP ListaInstrucciones LLCIERRE;
InsFor ::= Tipo Asignacion PUNTOYCOMA | Asignacion PUNTOYCOMA | PUNTOYCOMA;



Funcion ::= Tipo IDEN PAP Parametros PCIERRE LLAP ListaInstrucciones LLCIERRE; //  RETURN Tipo LLCIERRE PUNTOYCOMA;
Parametros ::= ListaParametros | ;
ListaParametros ::= Parametro COMA ListaParametros | Parametro;
Parametro ::= Tipo IDEN;



E0 ::= E0 OR E1 | E1;

E1 ::= E1 AND E2 | E2;

E2 ::= E2 IGUALDAD E3 | E2 DISTINTO E3 | E3;

E3 ::= E3 MAYOR E4
      | E3 MENOR E4
      | E3 MAYORIGUAL E4
      | E3 MENORIGUAL E4
      | E4;

E4 ::= E4 MAS E5
      | E4 MENOS E5
      | E5;

E5 ::= E5 POR E6
      | E5 DIV E6
      | E5 MOD E6
      | E6;

E6 ::= MENOS E6
      | NEGACION E6
      | E7;

E7 ::=  TRUE
      | FALSE
      | ENT
      | TIPOFLOAT
      | IDEN
      | LlamadaFuncion
      | NEW Tipo PAP PCIERRE
      | PAP E0 PCIERRE;

/*
NombreEnumerado ::= ENUM IDEN IGUAL LLAP ListaEnumerado LLCIERRE PUNTOYCOMA ;
ListaEnumerado ::= IDEN | IDEN COMA ListaEnumerado;
NombreRegistro ::= STRUCT IDEN LLAP ListaCampos LLCIERRE PUNTOYCOMA;
ListaCampos ::= Declaracion | Declaracion ListaCampos;
TipoArray ::= Tipo CAP TamañoArray CCIERRE | TipoArray CAP TamañoArray CCIERRE;
TamañoArray ::= ENT | IDEN;
TipoPuntero ::= Tipo POR;

Iteracion ::= WHILE PAP E0 PCIERRE LLAP ListaInstrucciones LLCIERRE | FOR PAP Asignacion PUNTOYCOMA E0 PUNTOYCOMA Asignacion PCIERRE LLAP ListaInstrucciones LLCIERRE;
*/


